
- name: Ensure dnsmasq/dhcp running
  service:
    name: dnsmasq
    state: started

- name: Ensure packer directory on server
  file:
    path: /root/NaC/packer
    state: directory
    mode: '0700'

- name: Ensure template provisioning folder on server
  file:
    path: "/root/NaC/{{ provision_directory }}"
    state: directory
    mode: '0700'

- name: Ensure provision directory copied to server
  synchronize:
    src: "./{{ provision_directory }}"
    dest: "/root/NaC/packer/."

- name: Ensure any templates in the root of the provisioning directory are templated
  template:
    src: "{{ item }}"
    dest: "/root/NaC/{{ provision_directory }}/{{ item | basename | regex_replace('\\.j2', '') }}"
  with_fileglob:
    - "./{{ provision_directory }}/*.j2"

# We need to start a HTTP server that serves any provisoning files
# The reason we do this rather than rely on Packer's HTTP server
# is because it does not bind to the ip on the vmbr1 interface 
# Packer's HTTP server picks the first IP to bind from and this would typically be on 
# the main network. We want to use an internal network isntead
# Generate port
- set_fact:
    http_port: "{{ range(35000, 65355) | random }}"

- debug:
    msg: "Starting HTTP server to serve provisioning directory on: {{ http_bind_address }}:{{ http_port }}"
- debug:
    msg: "nohup bash -c 'nohup python3 -m http.server {{ http_port }} --bind {{ http_bind_address }} -d /root/NaC/{{ provision_directory }} & echo $!'"

- name: "Fork Python HTTP server in local directory"
  raw:  nohup bash -c 'nohup python3 -m http.server {{ http_port }} --bind {{ http_bind_address }} -d /root/NaC/{{ provision_directory }} >/dev/null 2>&1 & echo $!'
  register: http_pid_result

- debug: msg="{{ http_pid_result.stdout }}"
- debug: msg="{{ http_pid_result.stderr }}"

# Because packer doesn't yet support ceph/rbd we need to generate a template on every Proxmox host
# If two packers execute at the exact same time, they will both retrieve the same id to create the disk
# for their VM and conflict
# Therefore we hash the template_name + the proxmox hostname and get a predictable vm id
- set_fact:
    vm_id: "{{ range(1000, 5000000) | random(seed=template_name+'-'+inventory_hostname) }}"

# We need to build up the command line args we pass to packer
# We pass in template name (for the respective proxmox host),
# HTTP server and port
# Proxmox creds
- set_fact:
    packer_vars_argument: " "

- set_fact:
    packer_vars_argument: "{{ packer_vars_argument }} -var 'vm_id={{ vm_id }}' "

- set_fact:
    packer_vars_argument: "{{ packer_vars_argument }} -var 'vm_name=packer-{{ template_name }}-{{ inventory_hostname }}' "

- set_fact:
    packer_vars_argument: "{{ packer_vars_argument }} -var 'template_name={{ template_name }}-{{ inventory_hostname }}' "
    
- set_fact:
    packer_vars_argument: "{{ packer_vars_argument }} -var 'http_base_url=http://{{ http_bind_address }}:{{ http_port }}' "
  
- set_fact:
    packer_vars_argument: "{{ packer_vars_argument}}  -var 'proxmox_api_url={{ proxmox_api_url }}' "

- set_fact:
    packer_vars_argument: "{{ packer_vars_argument}}  -var 'proxmox_username={{ proxmox_username }}' "

- set_fact:
    packer_vars_argument: "{{ packer_vars_argument}}  -var 'proxmox_password={{ proxmox_password }}' "

- set_fact:
    packer_vars_argument: "{{ packer_vars_argument}}  -var 'proxmox_node={{ proxmox_node }}' "

# Then add any vars they passed in packer_vars
- name: Build packer vars
  set_fact:
    packer_vars_argument: "{{ packer_vars_argument }} -var '{{ item.key }}={{ item.value }}' "
  loop: "{{ packer_vars | dict2items }}"
  when: "packer_vars is defined"

- debug:
    msg: "{{ packer_vars_argument }}"

- name: Remove a previous template if it exists
  proxmox_kvm:
    api_user: "{{ proxmox_username }}"
    api_password: "{{ proxmox_password }}"
    api_host: "{{ proxmox_node }}"
    name: "{{ template_name }}-{{ inventory_hostname }}"
    state: absent
  ignore_errors: true

- name: Stop a previous building template if it exists 
  proxmox_kvm:
    api_user: "{{ proxmox_username }}"
    api_password: "{{ proxmox_password }}"
    api_host: "{{ proxmox_node }}"
    name: "packer-{{ template_name }}-{{ inventory_hostname }}"
    state: stopped
    force: yes
  ignore_errors: true

- name: Remove a previous building template if it exists
  proxmox_kvm:
    api_user: "{{ proxmox_username }}"
    api_password: "{{ proxmox_password }}"
    api_host: "{{ proxmox_node }}"
    name: "packer-{{ template_name }}-{{ inventory_hostname }}"
    state: absent
  ignore_errors: true

- name: Call packer
  become: yes
  command:
    chdir: "/root/NaC/{{ provision_directory }}"
    cmd: "packer build {{ packer_vars_argument }} packer.json"
  register: io

- name: Add Cloud-Init drive to the template (not handled by packer yet)
  become: yes
  command:
    cmd: qm set {{ vm_id }} --ide2 local-lvm:cloudinit
  when: cloudinit

- name: Kill HTTP server
  command: "kill {{ http_pid_result.stdout }}"

- debug:
    msg: "{{ io.stdout.split('\n') }}"
- debug:
    msg: "{{ io.stderr.split('\n') }}"
   