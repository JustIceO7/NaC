---

- name: Check if VM with this name already exists
  shell: qm list | tail -n +2 | awk '{ if($2=="{{ vm.name }}") print $1 }' | grep "."
  register: cmd_result
  ignore_errors: yes

- name: Stop already existing VM
  shell: qm stop {{ cmd_result.stdout | trim }}
  when: "'rc' in cmd_result and cmd_result.rc == 0"

- name: Remove already existing VM
  shell: qm destroy {{ cmd_result.stdout | trim }}
  when: "'rc' in cmd_result and cmd_result.rc == 0"

- name: Ensure cloud-init metadata file
  copy:
    content: |
      {{ cloudinit.metadata | default('') }}
    dest: "/var/lib/vz/snippets/{{ vm.name }}.metadata.yml"

- name: Ensure cloud-init userdata file
  copy:
    content: |
      {{ cloudinit.userdata | default('#cloud-config')  }}
    dest: "/var/lib/vz/snippets/{{ vm.name }}.userdata.yml"

- name: Ensure cloud-init networking
  copy:
    content: |
      {{ cloudinit.networkconfig | default('') }}
    dest: "/var/lib/vz/snippets/{{ vm.name }}.networkconfig.yml"

- set_fact:
    vm_hash_id: "{{ range(1000, 5000000) | random(seed=vm.name+'-'+inventory_hostname) }}"

- name: Ensure Proxmox VM cloned
  proxmox_kvm:
    api_host:       "localhost"
    api_user:       "{{ proxmox_username }}"
    api_password:   "{{ proxmox_password }}"
    clone:          "{{ vm.clone }}"
    target:         "{{ inventory_hostname }}"
    newid:          "{{ vm_hash_id }}"
    timeout:        "{{ vm.timeout | default(300) }}"
    node:           "{{ inventory_hostname }}"
    name:           "{{ vm.name }}"
    storage:        "local-lvm"
    full:           yes
    state:          present
  when: "vm.clone is defined"

- name: Ensure Proxmox VM created
  proxmox_kvm:
    api_host:       "localhost"
    api_user:       "{{ proxmox_username }}"
    api_password:   "{{ proxmox_password }}"
    vmid:          "{{ vm_hash_id }}"
    timeout:        "{{ vm.timeout | default(300) }}"
    node:           "{{ inventory_hostname }}"
    name:           "{{ vm.name }}"
    storage:        "local-lvm"
    state:          present
  when: "vm.clone is not defined"

# proxmox_kvm has a load of issues so here are a bunch of workarounds below

# It does not provide a register to output the vmid of the new vm
# We can't assume the vm hash id we chose was the next free one
# we need to use shell commands to figure out the vmid by name
# if: https://github.com/ansible/ansible/pull/42313 is every reopened and resolved,
# you can use register: output & output.vmid instead
# It seems the author closed it without merging
- name: Get VMID
  raw: qm list | tail -n +2 | awk '{ if($2=="{{ vm.name }}") print $1 }'
  register: vmid_result

- set_fact:
    vmid: "{{ vmid_result.stdout | trim }}" 

# Fixes: fatal: [lovelace]: FAILED! => {"changed": false, "msg": "VM worker1.docker does not exist in cluster."}
- name: Wait to prevent a race condition where Proxmox doesn't think the VM exists yet
  wait_for:
    timeout: 10
  delegate_to: localhost

# set some vm stats
- name: Ensure specs set
  proxmox_kvm:
    api_host:       "localhost"
    api_user:       "{{ proxmox_username }}"
    api_password:   "{{ proxmox_password }}"
    name:           "{{ vm.name }}"
    node:           "{{ inventory_hostname }}"
    description:    "{{ vm.description }}"
    cores:          "{{ vm.cores | default(2) }}"
    memory:         "{{ vm.memory | default(768) }}"
    protection:     "{{ vm.protection | default('no') }}"
    update:         yes
    state:          present

# proxmox_kvm doesn't give you a way of setting net, virtio, ide, sata, scsi with the update: yes flag
# workaround below
- name: Set net
  shell: qm set {{ vmid }} --{{ item.key }} {{ item.value }}
  with_dict: "{{ vm.net }}"

- name: Add disks
  shell: qm set {{ vmid }} --{{ item.key }} {{ item.value }}
  with_dict: "{{ vm.additional_disks | default('{}') }}"

- name: Resize any disks
  shell: qm resize {{ vmid }} {{ item.key }} {{ item.value }}
  with_dict: "{{ vm.resize_disks | default('{}') }}"

# it doesn't set description either fml
- name: Set Description
  raw: qm set {{ vmid }} --description "{{ vm.description }}"

# - name: Set CD rom
#   raw: qm --cdrom {{ vmid }} {{ vm.cdrom }}
#   when: "vm.cdrom is defined"

- name: Ensure CloudInit drive added if we're not cloning an existing VM
  command:
    cmd: qm set {{ vmid }} --{{ cloudinit.nocloud_drive }} local-lvm:cloudinit 
  when: "cloudinit.nocloud_drive is defined"

- name: Ensure CloudInit options set
  command:
    cmd: 'qm set {{ vmid }} --cicustom "user=local:snippets/{{ vm.name }}.userdata.yml,network=local:snippets/{{ vm.name }}.networkconfig.yml,meta=local:snippets/{{ vm.name }}.metadata.yml"'

- name: Start VM if it was stopped
  proxmox_kvm:
    api_host:       "localhost"
    api_user:       "{{ proxmox_username }}"
    api_password:   "{{ proxmox_password }}"
    name:           "{{ vm.name }}"
    node:           "{{ inventory_hostname }}"
    state:          started

- name: Wait for SSH
  wait_for:
    port: 22
    search_regex: OpenSSH
    host: "{{ wait_for_ssh }}"
  when: wait_for_ssh is defined