
- name: Fetch ISO from URL & verify checksum
  get_url:
    url: "{{ packer_vars.iso_url }}"
    dest: "/var/lib/vz/template/iso/{{ packer_vars.iso_file }}"
    checksum: "{{ packer_vars.iso_checksum }}"

- name: Ensure packer directory on server
  file:
    path: /root/NaC/packer
    state: directory
    mode: '0700'

- name: Ensure template provisioning folder on server
  file:
    path: "/root/NaC/{{ provision_directory }}"
    state: directory
    mode: '0700'

- name: Ensure provision directory copied to server
  synchronize:
    src: "./{{ provision_directory }}"
    dest: "/root/NaC/packer/."

- name: Ensure any templates in the root of the provisioning directory are templated
  template:
    src: "{{ item }}"
    dest: "/root/NaC/{{ provision_directory }}/{{ item | basename | regex_replace('\\.j2', '') }}"
  with_fileglob:
    - "./{{ provision_directory }}/*.j2"

- set_fact:
    packer_vars_argument: ""

- name: Build packer vars
  set_fact:
    packer_vars_argument: "{{ packer_vars_argument }} -var '{{ item.key }}={{ item.value }}' "
  loop: "{{ packer_vars | dict2items }}"

# Generate port
- set_fact:
    http_port: "{{ range(35000, 65355) | random }}"

- debug:
    msg: "Starting HTTP server to serve provisioning directory on: {{ http_bind_address }}:{{ http_port }}"
- debug:
    msg: "bash -c 'python3 -m http.server {{ http_port }} --bind {{ http_bind_address }} & echo $!'"

# The reason we do this rather than rely on Packer's HTTP server
# is because it does not bind to the ip on the vmbr1 interface 
# Packer's HTTP server picks the first IP to bind from and this would typically be on 
# the main network. We want to use an internal network isntead
- name: "Fork Python HTTP server in local directory"
  command: "bash -c 'python3 -m http.server {{ http_port }} --bind {{ http_bind_address }} & echo $!'"
  args:
    chdir: "/root/NaC/{{ provision_directory }}"
  register: http_pid_result

- debug: msg="{{ http_pid_result.stdout }}"
- debug: msg="{{ http_pid_result.stderr }}"

- name: Call packer
  become: yes
  command:
    chdir: "/root/NaC/{{ provision_directory }}"
    cmd: "packer build -var 'http_base_url=http://{{ http_bind_address }}:{{ http_port }}' -var 'proxmox_api_url={{ proxmox_api_url }}' -var 'proxmox_username={{ proxmox_username }}' -var 'proxmox_password={{ proxmox_password }}' -var 'proxmox_node={{ proxmox_node }}' {{ packer_vars_argument }} packer.json"
  register: io

- debug: msg="{{ io.stdout }}"
- debug: msg="{{ io.stderr }}"
      
      
- name: Kill HTTP server
  command: "kill {{ http_pid_result.stdout }}"
